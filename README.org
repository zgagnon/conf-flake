#+title: Machine Configuration and Dotfile Management
#+author: Zoe Gagnon
#+date:  2024-02-27

* Flake.nix
:PROPERTIES:
:header-args: :tangle flake.nix
:END:


The flake.nix is the over-arching control point for the configuration. It is responsible for gathering the various package sources and applying the correct configuration for each machine.

** Inputs
The inputs to the flake are:
- nixpkgs: the main nix repository. I prefer to follow unstable for everything
- home-manager: individual environment + dotfiles management
- darwin: nix for MacOS specifialy. Its a set of binaries and a repository

** Machines
The machines configured are:
- My work laptop: [[file:hosts/Zells-MacBook-Pro][MO Machine]]

** What this does
This flake defines a set of machine-specific configurations. It takes as input the inputs listed above,
and outputs a [[https://nixos.wiki/wiki/NixOS_modules][Nix Module]] with one configuration per machine. When the flake is switched to, the configuration
will be determined by the host name. Each configuration includes home manager, as well as the configuration specific to that host
#+begin_src nix
  {
    description = "Machine Configuration Flake";
    inputs = {
      nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";
      home-manager.url = "github:nix-community/home-manager";
      darwin.url = "github:lnl7/nix-darwin";
      darwin.inputs.nixpkgs.follows = "nixpkgs";
      emacsng.url = "github:emacs-ng/emacs-ng";
    };
    outputs = { self, nixpkgs, home-manager, darwin, emacsng, ... }: {
     darwinConfigurations."Zells-MacBook-Pro" = darwin.lib.darwinSystem {
      system = "aarch64-darwin";
      modules = [
        home-manager.darwinModules.home-manager
        ./hosts/Zells-MacBook-Pro/default.nix
       ];
     };
    };
  }
#+end_src

* Switch Script
:PROPERTIES:
 :header-args: :tangle switch :shebang
 :END:

A quick script to speed up switching to a new darwin generation on some Mac machines

** Moving to a noodling branch if not already there
#+begin_src shell
# Get the current branch name
current_branch=$(git branch --show-current)

# Get today's date in YYYY-MM-DD format
today=$(date +%Y-%m-%d)

# Check if the current branch is 'main'
if [ "$current_branch" == "main" ]; then
    # # Get the current branch name
current_branch=$(git branch --show-current)

# Get today's date in YYYY-MM-DD format
today=$(date +%Y-%m-%d)

# Check if the current branch is 'main'
if [ "$current_branch" == "main" ]; then
    # Create a new branch with the name 'noodling-YYYY-MM-DD'
    new_branch="noodling-$today"
    git checkout -b "$new_branch"
    echo "Created and switched to new branch: $new_branch"
else
    echo "Not on the 'main' branch. Current branch is: $current_branch"
fiCreate a new branch with the name 'noodling-YYYY-MM-DD'
    new_branch="noodling-$today"
    git checkout -b "$new_branch"
    echo "Created and switched to new branch: $new_branch"
else
    echo "Not on the 'main' branch. Current branch is: $current_branch"
fi

#+end_src

** Deleting externally modified files
A quick script to speed up switching to a new darwin generation on some Mac machines

Kandji (a tool used by MO) likes to edit this and break nix control. I don't care about the kandji thing,
so just delete it before we start.
#+begin_src shell
config_file="$HOME/.ssh/config"

if [ -f "$config_file" ]; then
  echo "Deleting existing SSH config file: $config_file"
  rm "$config_file"
else
  echo "No existing SSH config file found."
fi
#+end_src

** Tangling the literate config files
This file is atso the source code for the script (and the flake). All the other source code is in
similar files. We need to remove the source code from the docs and put it into the appropriate files,
a process called `tangling` (this style of programming is called [[https://en.wikipedia.org/wiki/Literate_programming][Literate Programming]]). Here, we ask
git for the list of unstaged modified files, and tangle those specifically. After it finishes, we can stage
those files.

#+begin_src sh
SCRIPT_PATH="${BASH_SOURCE:-$0}"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

tangle_org() {
  local file="$1"
  printf "\033[1;34m%s\033[0m\n" "$file"
  emacs --batch --load org --eval "(org-babel-tangle-file \"$file\")"
}

for file in $(git diff --name-only --diff-filter=M | grep '\.org$'); do
  tangle_org "$file"
done

git add .
#+end_src

** Switching to the new generaton

Here we switch to the new generation. This is when the machine is brought in line with the config
#+begin_src sh
darwin-rebuild switch --flake ~/darwin-flake/ --fallback
#+end_src

** Commit the generation config

Finally, we can commit the current config. This way, when we roll back to a previous generation, we can
roll back to the previous config.
#+begin_src sh
SCRIPT_PATH="${BASH_SOURCE:-$0}"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
(
    cd "$SCRIPT_DIR" 
    commit_message=$(date)
    git commit -m "$commit_message"
)
#+end_src

** Update shell session
After the update, we need to source our .zshrc in this session, so place the source line in the paste buffer

#+begin_src sh
echo "source ~/.zshrc" | pbcopy
#+end_src


* DOOM Emacs

All emacs config is located in [[file:doom/config.org]]
