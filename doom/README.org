#+TITLE: DOOM init
#+auto-tangle: true

* DOOM Files
** Init.el Header

This is a literate config, so we must put the location at the front of the `init.el`. Also, we need to open the doom package list here
#+begin_src elisp :tangle init.el
;;; $DOOMDIR/init.el -*- lexical-binding: t; -*-

(setq +literate-config-file "README.org")

(doom! :input
#+end_src

The ==config.el== hosts all of the user-configuration

Some functionality depends on user-name and email, so we'll set that at the top
#+begin_src elisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "Zoe Gagnon"
      user-email-address "zell@mechanical-orchard.com")
#+end_src

* Language support
:PROPERTIES:
:header-args: :comments org
:END:

Doom language support is configured first.

#+begin_src elisp :tangle init.el
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row
#+end_src

* Completions
:PROPERTIES:
:header-args: :comments org
:END:

Completion configurations enable and control various completion tools

#+begin_src elisp :tangle init.el
       :completion
#+end_src

** Code
:PROPERTIES:
:header-args: :comments org
:END:

Company is an in-line auto complete for suggestions. We can control if the suggestions are
in a childframe or popover

#+begin_src elisp :tangle init.el
       (company +childframe)           ; the ultimate code completion backend
#+end_src

** Search
:PROPERTIES:
:header-args: :comments org
:END:

Vertico enhances emacs' built-in search with further capability. Searches files and file contents
#+begin_src elisp :tangle init.el
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future
#+end_src

** Copilot
Install Github Copilot

#+begin_src elisp :tangle packages.el
;;; $DOOMDIR/packages.el -*- lexical-binding: t; -*-
(package! copilot
  :recipe (:host github :repo "copilot-emacs/copilot.el" :files ("*.el" "dist")))
#+end_src

#+begin_src elisp :tangle config.el

(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))

#+end_src
* UI
:PROPERTIES:
:header-args: :comments org
:END:

UI configurations change the way DOOM appears
#+begin_src elisp :tangle init.el
       :ui
       ;;deft              ; notational velocity for Emacs
#+end_src

** DOOM
:PROPERTIES:
:header-args: :comments org
:END:

The doom package creates the overall appearance of DOOM. Includes styles, but also search menus
like `SPC-f-p`

#+begin_src elisp :tangle init.el
       doom              ; what makes DOOM look the way it does
#+end_src

We can then use it to set the fonts. See 'C-h v doom-font' for documentation and more examples of what they accept.
#+begin_src elisp :tangle config.el
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 18 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "FiraCode Nerd Font" :size 18)
      doom-symbol-font (font-spec :family "FiraCode Nerd Font" :size 18)
      doom-serif-font (font-spec :family "FiraCode Nerd Font" :size 18))

(setq window-divider-default-right-width 4
      window-divider-default-bottom-width 4)
#+end_src

And the theme. doom-fairy-floss is purple, good for day and night
#+begin_src elisp :tangle config.el

(setq doom-theme 'doom-library)
#+end_src

*** Doom Dashboard

Enables the dashboard and gives an unkillable fallback if all buffers are killed
#+begin_src elist :tangle init.el
       doom-dashboard    ; a nifty splash screen for Emacs
#+end_src

*** Doom Quit

Allows customizing the quit interaction

#+begin_src elisp :tangle init.el
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
#+end_src

*** Emoji

Allows using emoji in the app. Include the unicode and github support

#+begin_src elisp :tangle init.el
       (emoji +unicode +github)  ; ðŸ™‚
#+end_src

*** Hightlight TODO

Add highlight to various todo comments

#+begin_src elisp :tangle init.el
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
#+end_src

*** Hydra

Hydra is an emacs window management shortcut module. It is deprecated

#+begin_src elisp :tangle init.el
       ;;hydra
#+end_src

*** Indent Guides

Adds a verticle line showing indent depth levels

#+begin_src elisp :tangle init.el
       ;;indent-guides     ; highlighted indent columns
#+end_src

*** Ligatures

Enable font ligatures in various contexts

#+begin_src elisp :tangle init.el
       ligatures         ; ligatures and symbols to make your code pretty again
#+end_src

Set up ligatures for elixir
#+begin_src elisp :tangle config.el
(add-hook
 'elixir-mode-hook
 (lambda ()
   (push '(">=" . ?\u2265) prettify-symbols-alist)
   (push '("<=" . ?\u2264) prettify-symbols-alist)
   (push '("!=" . ?\u2260) prettify-symbols-alist)
   (push '("==" . ?\u2A75) prettify-symbols-alist)
   (push '("=~" . ?\u2245) prettify-symbols-alist)
   (push '("<-" . ?\u2190) prettify-symbols-alist)
   (push '("->" . ?\u2192) prettify-symbols-alist)
   (push '("<-" . ?\u2190) prettify-symbols-alist)
   (push '("|>" . ?\u25B7) prettify-symbols-alist)))
 #+end_src

*** Minimap

Enables a minimap of the file on the right hand side

#+begin_src elisp :tangle init.el
       minimap           ; show a map of the code on the side
#+end_src

*** Modeline

Informative modeline on the bottom of the screen

#+begin_src elisp :tangle init.el
       modeline          ; snazzy, Atom-inspired modeline, plus API
#+end_src

*** Nav-Flash

When dragging an action across several lines with vim motions, nav-flash will blink the cursor. This helps locate
it after a big move

#+begin_src elisp :tangle init.el
       nav-flash         ; blink cursor line after big motions
#+end_src

*** Neotree

A vim-style project tree
#+begin_src elisp :tangle init.el
       ;;neotree           ; a project drawer, like NERDTree for vim
#+end_src

*** OPHints

When dragging an action across several lines with vim motions or regions, highlight the effected region
#+begin_src elisp :tangle init.el
       ophints           ; highlight the region an operation acts on
#+end_src

*** Popup

Keep popup windows from stealing focus or blocking things
#+begin_src elisp :tangle init.el
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
#+end_src

*** Tabs

Tab bar on top
#+begin_src elisp :tangle init.el
       tabs              ; a tab bar for Emacs
#+end_src

*** Treemacs

Emacs-style project tree instead
#+begin_src elisp :tangle init.el
       treemacs          ; a project drawer, like neotree but cooler
#+end_src

*** Extended Unicode

Support for non-latin languages
#+begin_src elisp :tangle init.el
        ;unicode           ; extended unicode support for various languages
#+end_src

*** VC Gutter

Show git changes in the gutter. +pretty adds a nice coloring to it
#+begin_src elisp :tangle init.el
       (vc-gutter +pretty) ; vcs diff in the fringe
#+end_src

*** VI Tilde Fringe

Show a ~ in the left fringe to indicate empty lines
#+begin_src elisp :tangle init.el
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
#+end_src

*** TODO Window Select

Where we're going, we don't need mouse
#+begin_src elisp :tangle init.el
        window-select     ; visually switch windows
#+end_src

*** Workspaces

Add tabs and persistant workspaces
#+begin_src elisp :tangle init.el
       workspaces        ; tab emulation, persistence & separate workspaces
#+end_src

*** Zen Mode

Does a lot of changes that I don't like
#+begin_src elisp :tangle init.el
       ;;zen               ; distraction-free coding or writing
#+end_src

* Editor Modifications

** Basic editor configuration

*** Tab Width
 #+begin_src elisp :tangle config.el

(setq-default tab-width 2)
 #+end_src

*** Word Wrap

#+begin_src elisp :tangle config.el
(global-visual-line-mode 1)
#+end_src

*** Window Size
 Set a more reasonable default for opening a new client window. The very small window causes a lot of thrash when the window manager grabs a hold of it
 #+begin_src elisp :tangle config.el

(if (display-graphic-p)
    (progn
      (setq initial-frame-alist
            '((tool-bar-lines . 0)
              (width . 200)
              (height . 400)
              )
            )
      )
  )
 #+end_src


** Doom Modules
A set of modules that change the way the editor works
#+begin_src elisp :tangle init.el
       :editor
#+end_src

*** Super-Save Mode
:PROPERTIES:
:header-args: :comments org
:END:

[[https://github.com/bbatsov/super-save][Super-Save]] is a minor mode to save on window events.

#+begin_src elisp :tangle packages.el
(package! super-save)
;(use-package! super-save)

#+end_src

In order for it to hook in to org mode, we need to load it after that
 #+begin_src elisp :tangle config.el

(after! org
  (super-save-mode +1))

(setq auto-save-default nil)
 #+end_src

*** EVIL

Only way emacs is good
#+begin_src elisp :tangle init.el
       (evil +everywhere); come to the dark side, we have cookies
#+end_src

*** Expand Region
(non-doom)

#+begin_src elisp :tangle packages.el
(package! expand-region)
#+end_src

#+begin_src elisp :tangle config.el
(use-package! expand-region
  :bind ("C-=" . er/expand-region))
#+end_src
*** File Templates

Inserts a snippet when opening a blank file
#+begin_src elisp :tangle init.el
       file-templates    ; auto-snippets for empty files
#+end_src

*** Folding

Code folding. Not interesting, occasionaly useful. May delete it later
#+begin_src elisp :tangle init.el
fold              ; (nigh) universal code folding
#+end_src

*** Format

Auto-formatting. + doing it on save. Don't fight about brackets, please
#+begin_src elisp :tangle init.el
       (format +onsave)  ; automated prettiness
#+end_src

*** God Mode

Emacs people are pretty dramatic
#+begin_src elisp :tangle init.el
       ;;god               ; run Emacs commands without modifier keys
#+end_src

*** Lispy

Editor enhancements for when programing lisp
#+begin_src elisp :tangle init.el
       ;;lispy             ; vim for lisp, for people who don't like vim
#+end_src

*** Multiple Cursors

Enables multi-cursor editing via [[https://github.com/hlissner/evil-multiedit][Evil Multi-Edit]]
#+begin_src elisp :tangle init.el
       multiple-cursors  ; editing in many places at once
#+end_src

*** Text Object Editing

Makes emacs aware of [[https://github.com/clemera/objed][Text Objects]] and gives capability to navigate among them and manipulate them
#+begin_src elisp :tangle init.el
       ;;objed             ; text object editing for the innocent
#+end_src

*** Parinfer

Attempt to infer parenthesis for lisp code
#+begin_src elisp :tangle init.el
       ;;parinfer          ; turn lisp into python, sort of
#+end_src

*** Rotate Text

Given a configiguration with a list of text candidates, rotate between them with a keypress
#+begin_src elisp :tangle init.el
       ;;rotate-text       ; cycle region at point between text candidates
#+end_src

*** Snippets

Another way to expand text, this time for emacs only
#+begin_src elisp :tangle init.el
       snippets          ; my elves. They type so I don't have to
#+end_src

*** Word Wrap

Self explanatory
#+begin_src elisp :tangle init.el
       ;;word-wrap         ; soft wrapping with language-aware indent
#+end_src

** Emacs

This section of modules changes the way emacs works
#+begin_src elisp :tangle init.el
       :emacs
#+end_src

*** Dired

Directory navigation and editing. Not sure if I like it
#+begin_src elisp :tangle init.el
       dired             ; making dired pretty [functional]
#+end_src

*** Electric Indent

Smart auto indent
#+begin_src elisp :tangle init.el
       electric          ; smarter, keyword-based electric-indent
#+end_src

*** IBuffer

See what buffers are open and select among them
#+begin_src elisp :tangle init.el
       ibuffer         ; interactive buffer management
#+end_src

Set up ibuffer with projectile sorting

#+begin_src elisp :tangle config.el
(add-hook 'ibuffer-hook
          (lambda ()
            (ibuffer-projectile-set-filter-groups)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))

#+end_src

*** Undo

Better undo
#+begin_src elisp :tangle init.el
       undo              ; persistent, smarter undo for your inevitable mistakes
#+end_src

*** VC

Git
#+begin_src elisp :tangle init.el
       vc                ; version-control and Emacs, sitting in a tree
#+end_src

** Terminals

In case your terminal isn't good enough, emacs is one too

#+begin_src elisp :tangle init.el
       :term
#+end_src

*** ESHell

elisp shell
#+begin_src elisp :tangle init.el
       ;;eshell            ; the elisp shell that works everywhere
#+end_src

*** Shell

a shell
#+begin_src elisp :tangle init.el
       ;;shell             ; simple shell REPL for Emacs
#+end_src

*** Term

terminal emulator
#+begin_src elisp :tangle init.el
       ;;term              ; basic terminal emulator for Emacs
#+end_src

*** VTerm

virtual terminal emulator
#+begin_src elisp :tangle init.el
       vterm             ; the best terminal emulation in Emacs
#+end_src

** Checkers

Checking syntax, spelling, stuff

#+begin_src elisp :tangle init.el
       :checkers
#+end_src

*** Syntax

Code syntax
#+begin_src elisp :tangle init.el
       syntax              ; tasing you for every semicolon you forget
#+end_src

*** Spelling

#+begin_src elisp :tangle init.el
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
#+end_src

*** Grammar


#+begin_src elisp :tangle init.el
       ;;grammar           ; tasing grammar mistake every you make
#+end_src

** Tools

Cool tools for doing things - mostly command line

#+begin_src elisp :tangle init.el
       :tools
#+end_src

*** Ansible

Setting up computers remotely, the old way
#+begin_src elisp :tangle init.el
       ;;ansible
#+end_src

*** Biblio

Plug citations into latex
#+begin_src elisp :tangle init.el
       ;;biblio            ; Writes a PhD for you (citation needed)
#+end_src

*** Collab

Remote buffers for all the friends emacs users don't have
#+begin_src elisp :tangle init.el
       ;;collab            ; buffers with friends
#+end_src

*** Debugger

Sometimes you need to know what the code is actually doing
#+begin_src elisp :tangle init.el
       (debugger +lsp)          ; FIXME stepping through code, to help you add bugs
#+end_src

*** Direnv

Can't have per-directory environment without per-directory
#+begin_src elisp :tangle init.el
       direnv
#+end_src

*** Docker

Fake systems
#+begin_src elisp :tangle init.el
       ;;docker
#+end_src

*** Editorconfig

Getting the same settings as the team
#+begin_src elisp :tangle init.el
       editorconfig      ; let someone else argue about tabs vs spaces
#+end_src

*** EIN (Jupyter)

Isn't Jupyter just org mode for python?
#+begin_src elisp :tangle init.el
       ;;ein               ; tame Jupyter notebooks with emacs
#+end_src

*** Eval

Run emacs in emacs
#+begin_src elisp :tangle init.el
       (eval +overlay)     ; run code, run (also, repls)
#+end_src

*** Lookup

Finding things in your emacs
#+begin_src elisp :tangle init.el
       lookup              ; navigate your code and its documentation
#+end_src

*** LSP

What if emacs was an IDE? (It's not)
#+begin_src elisp :tangle init.el
       (lsp +peek)               ; M-x vscode
#+end_src

 Set global LSP options
 #+begin_src elisp *tangle config.el

(after! lsp-mode (
                  setq lsp-lens-enable t
                  lsp-ui-peek-enable t
                  lsp-ui-doc-enable nil
                  lsp-ui-doc-position 'bottom
                  lsp-ui-doc-max-height 70
                  lsp-ui-doc-max-width 150
                  lsp-ui-sideline-show-diagnostics t
                  lsp-ui-sideline-show-hover nil
                  lsp-ui-sideline-show-code-actions t
                  lsp-ui-sideline-diagnostic-max-lines 20
                  lsp-ui-sideline-ignore-duplicate t
                  lsp-ui-sideline-enable t))

 #+end_src
*** Magit

This is the worst name for a git client, and its an entirely different porcelain which I don't need
but it puts blame in the buffers
#+begin_src elisp :tangle init.el
       magit             ; a git porcelain for Emacs
#+end_src

*** Make

What if we didn't learn anything in the last 40 years (said from Emacs)
#+begin_src elisp :tangle init.el
       ;;make              ; run make tasks from Emacs
#+end_src

*** Password

Emacs can do everything (in a very mediocre way)
#+begin_src elisp :tangle init.el
       ;;pass              ; password manager for nerds
#+end_src

*** PDF

Do I want this?
#+begin_src elisp :tangle init.el
       ;;pdf               ; pdf enhancements
#+end_src

*** Prodigy

Monit but in emacs
#+begin_src elisp :tangle init.el
       ;;prodigy           ; FIXME managing external services & code builders
#+end_src

*** RGB

Strings
#+begin_src elisp :tangle init.el
       ;;rgb               ; creating color strings
#+end_src

*** Taskrunner

Deprecated
#+begin_src elisp :tangle init.el
       ;;taskrunner        ; taskrunner for all your projects
#+end_src

*** Terraform

I do this at work!
#+begin_src elisp :tangle init.el
       terraform         ; infrastructure as code
#+end_src

*** TMUX

For people without modern terminals
#+begin_src elisp :tangle init.el
       ;;tmux              ; an API for interacting with tmux
#+end_src

*** Tree-sitter

Make emacs understand what code should look like
#+begin_src elisp :tangle init.el
       tree-sitter       ; syntax and parsing, sitting in a tree...
#+end_src

*** Upload

seems overkill
#+begin_src elisp :tangle init.el
       ;;upload            ; map local to remote projects via ssh/ftp
#+end_src

** OS

Setting up your operating system
#+begin_src elisp :tangle init.el
       :os
#+end_src

*** MacOs compatibility
#+begin_src elisp :tangle init.el
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
#+end_src

*** TTY Compatibility

Might want this if I want emacs in a terminal ever
#+begin_src elisp :tangle init.el
       ;;tty               ; improve the terminal Emacs experience
#+end_src

** Programming Languages
#+begin_src elisp :tangle init.el
       :lang
#+end_src

#+RESULTS:
: :lang

*** Agda

Its esoteric and has good types - cool. You need a special keyboard - cooler
#+begin_src elisp :tangle init.el
       ;;agda              ; types of types of types of types...
#+end_src

*** Beancount

Emacs double entry book-keeping. Like acountants would use emacs
#+begin_src elisp :tangle init.el
       ;;beancount         ; mind the GAAP
#+end_src

*** CC

C or C**
#+begin_src elisp :tangle init.el
       (cc +lsp)         ; C > C++ == 1
#+end_src

*** Clojure

A lisp you can use for work
#+begin_src elisp :tangle init.el
       ;;clojure           ; java with a lisp
#+end_src

*** COBOL

#+begin_src elisp :tangle packages.el
(package! cobol-mode)
#+end_src

#+begin_src elisp :tangle config.el


;(after! cobol-mode (setq auto-mode-alist
      ;; (append
      ;;  '(("\\.cob\\'" . cobol-mode)
      ;;    ("\\.cbl\\'" . cobol-mode)
      ;;    ("\\.cpy\\'" . cobol-mode))
      ;;  auto-mode-alist)))
#+end_src
*** Common Lisp

A lisp proffesionals use for work
#+begin_src elisp :tangle init.el
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
#+end_src

*** COQ

The theorem proving language
#+begin_src elisp :tangle init.el
       ;;coq               ; proofs-as-programs
#+end_src

*** Crystal

Everyone wants fast ruby, but not typed ruby
#+begin_src elisp :tangle init.el
       ;;crystal           ; ruby at the speed of c
#+end_src

*** C-Sharp

Cause Microsoft didn't own java
#+begin_src elisp :tangle init.el
       ;;csharp            ; unity, .NET, and mono shenanigans
#+end_src

*** Data

"Data" the language?
#+begin_src elisp :tangle init.el
       ;;data              ; config/data formats
#+end_src

*** Dart

What if you could make UIs, but with objects
#+begin_src elisp :tangle init.el
       ;;(dart +flutter)   ; paint ui and not much else
#+end_src

*** Dhall

Side-effect free config language
#+begin_src elisp :tangle init.el
       ;;dhall
#+end_src

*** Elixir

I guess its fine for work
#+begin_src elisp :tangle init.el
       (elixir +lsp +tree-sitter)            ; erlang done right
#+end_src


Add ".elixir2" files to the list of files that trigger the mode
 #+begin_src elisp :tangle config.el
(add-to-list 'auto-mode-alist '("\\.elixir2\\'" . elixir-mode))
 ;Create a buffer-local hook to run elixir-format on save, only when we enable elixir-mode.
;(add-hook 'elixir-mode-hook
;         (lambda () (add-hook 'before-save-hook 'elixir-format nil t)))
 #+end_src


**** Alchemist
An elixir mode for interacting with mix. Can compile and run tests.

Install alchemist cause it seems like doom didn't pull it?
#+begin_src elisp :tangle packages.el
;;(unless (package-installed-p 'alchemist)
;;  (package-install 'alchemist))
(if (package-installed-p 'alchemist)
   (progn
    ;;  No action needed, its here
     )
        (package! alchemist)
    )
#+end_src


Setup mix for nix
#+begin_src elisp :tangle config.el
 (setq alchemist-mix-command "/etc/profiles/per-user/zell/bin/mix")
#+end_src

and configure it?
#+begin_src elisp :tangle config.el
(use-package! alchemist
  :hook (elixir-mode . alchemist-mode)
  :config
  (set-lookup-handlers! 'elixir-mode
    :definition #'alchemist-goto-definition-at-point
    :documentation #'alchemist-help-search-at-point)
  (set-eval-handler! 'elixir-mode #'alchemist-eval-region)
  (set-repl-handler! 'elixir-mode #'alchemist-iex-project-run)
  (setq alchemist-mix-env "dev")
  (map! :map elixir-mode-map :nv "m" alchemist-mode-keymap))
#+end_src

**** LSP

Configure some LSP options
#+begin_src elisp :tangle config.el
(setq lsp-elixir-fetch-deps nil)
(setq lsp-elixir-suggest-specs nil)
(setq lsp-elixir-signature-after-complete t)
(setq lsp-elixir-enable-test-lenses t)
#+end_src

Set some global LSP options as well
#+begin_src elisp :tangle config.el
(after! lsp-ui (
setq lsp-lens-enable t
lsp-ui-peek-enable t
lsp-ui-doc-enable nil
lsp-ui-doc-position 'bottom
lsp-ui-doc-max-height 70
lsp-ui-doc-max-width 150
lsp-ui-sideline-show-diagnostics t
lsp-ui-sideline-show-hover nil
lsp-ui-sideline-show-code-actions t
lsp-ui-sideline-diagnostic-max-lines 20
lsp-ui-sideline-ignore-duplicate t
lsp-ui-sideline-enable t))
#+end_src

**** Copilot

Add a copilot indentation for elixir
#+begin_src elisp :tangle config.el

(defvar universal-indent 2)

(after! (evil copilot)
  (add-to-list 'copilot-indentation-alist '(elixir-mode universal-indent)))
#+end_src

*** ELM
Someone wanted haskell for flux loop
#+begin_src elisp :tangle init.el
       ;;elm               ; care for a cup of TEA?
#+end_src

*** ELisp

Use it for this thingy
#+begin_src elisp :tangle init.el
       emacs-lisp        ; drown in parentheses
#+end_src


*** Erlang

Doesn't know what a string is
#+begin_src elisp :tangle init.el
       ;;erlang            ; an elegant language for a more civilized age
#+end_src

*** Ess

Statistics?
#+begin_src elisp :tangle init.el
       ;;ess               ; emacs speaks statistics
#+end_src

*** Factor

Stack based and not popular, apparently
#+begin_src elisp :tangle init.el
       ;;factor
#+end_src

*** Faust

Sound processing language
#+begin_src elisp :tangle init.el
       ;;faust             ; dsp, but you get to keep your soul
#+end_src

*** Fortran

Older than bones, but still not dead
#+begin_src elisp :tangle init.el
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
#+end_src

*** F#

What if Microsoft had a haskell
#+begin_src elisp :tangle init.el
       ;;fsharp            ; ML stands for Microsoft's Language
#+end_src

*** FStar

Somebody is working on it
#+begin_src elisp :tangle init.el
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
#+end_src

*** GDScript

Godot script
#+begin_src elisp :tangle init.el
       ;;gdscript          ; the language you waited for
#+end_src

*** GoLang

Its fine
#+begin_src elisp :tangle init.el
       ;;(go +lsp)         ; the hipster dialect
#+end_src

*** GraphQL

Ask for what you need
#+begin_src elisp :tangle init.el
       ;;(graphql +lsp)    ; Give queries a REST
#+end_src

*** Haskell

The best, if you can get it to work
#+begin_src elisp :tangle init.el
       (haskell +lsp)    ; a language that's lazier than I am
#+end_src

*** HY

Lisp embedded in python
#+begin_src elisp :tangle init.el
       ;;hy                ; readability of scheme w/ speed of python
#+end_src

*** Idriss

Another typed functional language
#+begin_src elisp :tangle init.el
       ;;idris             ; a language you can depend on
#+end_src

*** JSON

YAML but with more quotes
#+begin_src elisp :tangle init.el
       json              ; At least it ain't XML
#+end_src

*** Java

Write once, debug everywhere
#+begin_src elisp :tangle init.el
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
#+end_src

*** Javascript

Runs in the operating system of the present (browser)
#+begin_src elisp :tangle init.el
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
#+end_src

*** Julia

#+begin_src elisp :tangle init.el
       ;;julia             ; a better, faster MATLAB
#+end_src

*** Kotlin

Java++
#+begin_src elisp :tangle init.el
       ;;kotlin            ; a better, slicker Java(Script)
#+end_src

*** Latex

Make a resume
#+begin_src elisp :tangle init.el
       ;;latex             ; writing papers in Emacs has never been so fun
#+end_src

*** Lean

Another theorem prover
#+begin_src elisp :tangle init.el
       ;;lean              ; for folks with too much to prove
#+end_src

*** Ledger

Another book-keeper
#+begin_src elisp :tangle init.el
       ;;ledger            ; be audit you can be
#+end_src

*** Lua

The best language to put in your langauge
#+begin_src elisp :tangle init.el
       lua               ; one-based indices? one-based indices
#+end_src

*** Markdown

Its pretty low-lift
#+begin_src elisp :tangle init.el
       markdown          ; writing docs for people to ignore
#+end_src

*** Nim

Typed language again
#+begin_src elisp :tangle init.el
       ;;nim               ; python + lisp at the speed of c
#+end_src

*** Nix

The OS controller
#+begin_src elisp :tangle init.el
       nix               ; I hereby declare "nix geht mehr!"
#+end_src

*** OCaml

Pretty good
#+begin_src elisp :tangle init.el
       ;;ocaml             ; an objective camel
#+end_src

*** Org

Not logseq (edit: YOU FOOL! Logseq support org format!!)
#+begin_src elisp :tangle init.el
       (org +roam2)               ; organize your plain life in plain text
#+end_src

 Make sure org mode can tangle some basics. Also prompt to tangle after save - works with auto save
 #+begin_src elisp :tangle config.el
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (shell . t)
   (emacs-lisp . t)
   ))

(add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
 #+end_src

 If you use `org' and don't want your org files in the default location below,
 change `org-directory'. It must be set before org loads!
 #+begin_src elisp :tangle config.el

(setq org-directory "~/logseq/")
(setq org-roam-directory "~/logseq/")
(setq org-roam-dailies-directory "journals/")

 #+end_src

#+begin_src elisp :tangle config.el
(custom-set-faces!
  `(org-level-1 :family "Luminari" :height 400)
  `(org-level-2 :family "Cochin" :height 300)
  `(org-level-3 :family "Rockwell" :height 200)
  `(org-level-4 :family "Rockwell" :height 150)
  `(org-level-5 :family "Rockwell" :height 150)
  `(org-level-6 :family "Rockwell" :height 150)
                )

#+end_src

*** PHP

oh god oh god
#+begin_src elisp :tangle init.el
       ;;php               ; perl's insecure younger brother
#+end_src

*** PlantUML

UML D:
#+begin_src elisp :tangle init.el
       ;;plantuml          ; diagrams for confusing people more
#+end_src

*** Purescript

They tried
#+begin_src elisp :tangle init.el
       purescript        ; javascript, but functional
#+end_src

*** Python

Misplaced principals
#+begin_src elisp :tangle init.el
       ;;python            ; beautiful is better than ugly
#+end_src

*** QT

It works
#+begin_src elisp :tangle init.el
       ;;qt                ; the 'cutest' gui framework ever
#+end_src

*** Racket

Language definer
#+begin_src elisp :tangle init.el
       ;;racket            ; a DSL for DSLs
#+end_src

*** Raku

perl
#+begin_src elisp :tangle init.el
       ;;raku              ; the artist formerly known as perl6
#+end_src

*** Rest

I guess emacs does this too
#+begin_src elisp :tangle init.el
       ;;rest              ; Emacs as a REST client
#+end_src

*** RST

Another one
#+begin_src elisp :tangle init.el
       ;;rst               ; ReST in peace
#+end_src

*** Ruby

Big mistake
#+begin_src elisp :tangle init.el
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
#+end_src

*** Rust

Make it fast, make it safe
#+begin_src elisp :tangle init.el
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
#+end_src

*** Scala

Like 10 languages in one
#+begin_src elisp :tangle init.el
       ;;scala             ; java, but good
#+end_src

*** Scheme

A good lisp
#+begin_src elisp :tangle init.el
       ;;(scheme +guile)   ; a fully conniving family of lisps
#+end_src

*** SH

Shell programming
#+begin_src elisp :tangle init.el
       sh                ; she sells {ba,z,fi}sh shells on the C xor
#+end_src

*** Standard ML

ML
#+begin_src elisp :tangle init.el
       ;;sml
#+end_src

*** Solidity

Blockchain ðŸ¤¢
#+begin_src elisp :tangle init.el
       ;;solidity          ; do you need a blockchain? No.
#+end_src

*** Swift

Better than objective c?
#+begin_src elisp :tangle init.el
       ;;swift             ; who asked for emoji variables?
#+end_src

*** Terra

Standalone low-level language of lua
#+begin_src elisp :tangle init.el
       ;;terra             ; Earth and Moon in alignment for performance.
#+end_src

*** Web

Web?
#+begin_src elisp :tangle init.el
       web               ; the tubes
#+end_src

*** YAML

JSON, with invisible brackets
#+begin_src elisp :tangle init.el
       yaml              ; JSON, but readable
#+end_src

*** Zig

Rust's less popular brother
#+begin_src elisp :tangle init.el
       ;;zig               ; C, but simpler
#+end_src

** Email

NO
#+begin_src elisp :tangle init.el
       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)
#+end_src

** Apps

Why not just use the real thing?
#+begin_src elisp :tangle init.el
       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought
#+end_src

** Config
#+begin_src elisp :tangle init.el
       :config
       literate
       (default +bindings +smartparens)
)
#+end_src
#+end_src

* Packages
:PROPERTIES:
:header-args: :tangle packages.el :comments org
:END:
Here we will install any packages not found in the default modules


* Code Utilities

** Commenting

#+begin_src elisp :tangle packages.el
(package! evil-commentary)
#+end_src
