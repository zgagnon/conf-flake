* NuShell

#+begin_src nix :tangle starship.nix
{lib}:
{
  enable = true;
  enableNushellIntegration = true;
  settings = {
    format = lib.concatStrings [
      "$shell"
      "$directory"
      "$git_branch"
      "$git_commit"
      "$git_state"
      "$git_metrics"
      "$git_status"
      "$fill"
      "$dotnet"
      "$elixir"
      "$haskell"
      "$nix_shell"
      "$direnv"
      "$line_break"
      "$status"
      "$sudo"
      "$character"
    ];

    shell = {
      disabled = false;
      style = "red bold";
    };

    right_format = lib.concatStrings [
      "$cmd_duration"
    ];

    direnv = {
      disabled = false;
      symbol = "drenv";
      allowed_msg = "âœ…";
      not_allowed_msg = "ðŸš«";
      loaded_msg = "ðŸ’¯";
      unloaded_msg = "ðŸˆ³";
    };

    git_metrics = {
      added_style = "bold blue";
      format = "[+$added]($added_style)/[-$deleted]($deleted_style) ";
    };

    cmd_duration = {
      min_time = 0;
      show_milliseconds = true;
      show_notifications = true;
    };

    character = {
      success_symbol = "âžœ";
      error_symbol = "âžœ|";
    };
  };
}
#+end_src


#+begin_src nix :tangle nushell.nix :noweb yes
{
  enable = true;
  extraConfig = ''
    <<nushell>>
  '';
}
#+end_src

#+begin_src nix :tangle carapace.nix
{
  enable = true;
  enableNushellIntegration = true;
}
#+end_src

#+begin_src nix :tangle atuin.nix
{
  enable = true;
  enableNushellIntegration = true;
}
#+end_src

#+begin_src nix :tangle zoxide.nix
{
  enable = true;
  enableNushellIntegration = true;
}
#+end_src

#+begin_src nix :tangle direnv.nix
{
  enableNushellIntegration = true;
  enableZshIntegration = true;
  enable = true;
}
#+end_src
** Nushell config

#+NAME: nushell
#+begin_src nushell
$env.PATH = ($env.PATH | split row (char esep) | append '$nu.home-path/.config/emacs/bin')

def fuck [] {
    $env.THEFUCK_REQUIRE_CONFIRMATION = false
    $env.THEFUCK_HISTORY_LIMIT = 9999
    $env.THEFUCK_WAIT_COMMAND = 10
    let output = (^thefuck ...(history | last 1 | get command | str trim) | str trim)
    print $output
    nu -c $output
}

jj util completion nushell | save completions-jj.nu


if (ls ~/.ai.env.toml | is-not-empty ) {
print "Loading AI env vars...";
open ~/.ai.env.toml | load-env; }
#+end_src
