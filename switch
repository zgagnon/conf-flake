# Get the current branch name
current_branch=$(git branch --show-current)

# Get today's date in YYYY-MM-DD format
today=$(date +%Y-%m-%d)

# Check if the current branch is 'main'
if [ "$current_branch" == "main" ]; then
    # # Get the current branch name
current_branch=$(git branch --show-current)

# Get today's date in YYYY-MM-DD format
today=$(date +%Y-%m-%d)

# Check if the current branch is 'main'
if [ "$current_branch" == "main" ]; then
    # Create a new branch with the name 'noodling-YYYY-MM-DD'
    new_branch="noodling-$today"
    git checkout -b "$new_branch"
    echo "Created and switched to new branch: $new_branch"
else
    echo "Not on the 'main' branch. Current branch is: $current_branch"
fiCreate a new branch with the name 'noodling-YYYY-MM-DD'
    new_branch="noodling-$today"
    git checkout -b "$new_branch"
    echo "Created and switched to new branch: $new_branch"
else
    echo "Not on the 'main' branch. Current branch is: $current_branch"
fi

config_file="$HOME/.ssh/config"

if [ -f "$config_file" ]; then
  echo "Deleting existing SSH config file: $config_file"
  rm "$config_file"
else
  echo "No existing SSH config file found."
fi

SCRIPT_PATH="${BASH_SOURCE:-$0}"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

tangle_org() {
  local file="$1"
  printf "\033[1;34m%s\033[0m\n" "$file"
  emacs --batch --load org --eval "(org-babel-tangle-file \"$file\")"
}

for file in $(git diff --name-only --diff-filter=M | grep '\.org$'); do
  tangle_org "$file"
done

git add .

darwin-rebuild switch --flake ~/darwin-flake/ --fallback

SCRIPT_PATH="${BASH_SOURCE:-$0}"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
(
    cd "$SCRIPT_DIR" 
    commit_message=$(date)
    git commit -m "$commit_message"
)

echo "source ~/.zshrc" | pbcopy
